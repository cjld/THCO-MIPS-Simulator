/*
 * MemoryPanel.java
 *
 * Created on December 23, 2008, 10:31 AM
 */
package simulator.ui;

import java.awt.Font;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import org.jdesktop.application.Action;
import simulator.core.MemoryIO;
import simulator.core.Misc;

/**
 *
 * @author  LeeThree
 */
public class MemoryPanel extends javax.swing.JPanel {

    /** Creates new form MemoryPanel */
    public MemoryPanel() {
        centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        initComponents();
        memoryTable.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        memoryTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        memoryTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        memoryTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        memoryTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
    }

    public void setConfig(UIConfig config) {
        this.config = config;
    }

    public void update() {
        memoryTableModel.fireTableDataChanged();
    }

    @Action
    public void inspect() {
        try {
            addr = Short.decode(addrField.getText());
            offset = Math.min(Integer.decode(offsetField.getText()), MemoryIO.MAX_ADDR - addr);
            memoryTableModel.fireTableDataChanged();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "The address or offset is invalid.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addrLabel = new javax.swing.JLabel();
        addrField = new javax.swing.JTextField();
        offsetLabel = new javax.swing.JLabel();
        offsetField = new javax.swing.JTextField();
        inspectButton = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        memoryTable = new javax.swing.JTable();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(simulator.SimulatorApp.class).getContext().getResourceMap(MemoryPanel.class);
        addrLabel.setText(resourceMap.getString("addrLabel.text")); // NOI18N
        addrLabel.setName("addrLabel"); // NOI18N

        addrField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        addrField.setText(resourceMap.getString("addrField.text")); // NOI18N
        addrField.setName("addrField"); // NOI18N

        offsetLabel.setText(resourceMap.getString("offsetLabel.text")); // NOI18N
        offsetLabel.setName("offsetLabel"); // NOI18N

        offsetField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        offsetField.setText(resourceMap.getString("offsetField.text")); // NOI18N
        offsetField.setName("offsetField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(simulator.SimulatorApp.class).getContext().getActionMap(MemoryPanel.class, this);
        inspectButton.setAction(actionMap.get("inspect")); // NOI18N
        inspectButton.setText(resourceMap.getString("inspectButton.text")); // NOI18N
        inspectButton.setName("inspectButton"); // NOI18N

        tableScrollPane.setName("tableScrollPane"); // NOI18N

        memoryTable.setModel(memoryTableModel);
        memoryTable.setName("memoryTable"); // NOI18N
        tableScrollPane.setViewportView(memoryTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addrLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addrField, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(offsetLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(offsetField, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(inspectButton)
                .addContainerGap())
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addrLabel)
                    .addComponent(inspectButton)
                    .addComponent(addrField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(offsetLabel)
                    .addComponent(offsetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addrField;
    private javax.swing.JLabel addrLabel;
    private javax.swing.JButton inspectButton;
    private javax.swing.JTable memoryTable;
    private javax.swing.JTextField offsetField;
    private javax.swing.JLabel offsetLabel;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
    private short addr;
    private int offset;
    private UIConfig config;
    private MemoryTableModel memoryTableModel = new MemoryTableModel();
    DefaultTableCellRenderer centerRenderer;

    private class MemoryTableModel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return offset;
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            short rowAddr = (short) (addr + rowIndex);
            try {
                switch (columnIndex) {
                    case 0:
                        return "0x" + Integer.toHexString(rowAddr).toUpperCase();
                    case 1:
                        return Misc.toHex(config.memory.get(rowAddr));
                    case 2:
                        return Short.toString(config.memory.get(rowAddr));
                    case 3:
                        return Misc.decode(config.memory.get(rowAddr));
                    default:
                        return null;
                }
            } catch (ArrayIndexOutOfBoundsException ex) {
                return "undefined";
            }
        }
        private final String[] columnNames = {
            "Address", "Hexadecimal", "Decimal", "Binary"
        };
    }
}
